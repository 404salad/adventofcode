// part 2
use util::get_lines;
fn value(word: &str) -> Option<u32> {
    match word {
        "zero" => Some(0),
        "one" => Some(1),
        "two" => Some(2),
        "three" => Some(3),
        "four" => Some(4),
        "five" => Some(5),
        "six" => Some(6),
        "seven" => Some(7),
        "eight" => Some(8),
        "nine" => Some(9),
        _ => None
    }
}
fn getsum(word: &str) -> u32 {
    if word.is_empty() {return 0};
    let mut flag1=false; let mut flag2=false;
    let mut front=0; let mut back = 0;
    let mut i = 0;
    let mut j = word.len()-1;
    let mut acc = String::from("");
    'outer:for a in word.chars() {
        if a.is_digit(10) {
            break;
        }
        else {
            acc.push(a);
            if acc.len() > 3 {
                let acc1 = acc.clone();
                let nums = vec!["zero","one","two","three","four","five","six","seven","eight","nine"];
                for z in nums{
                    if acc1 !=str::replace(&acc,z,"") {
                        front = value(z).unwrap();
                        flag1=true;
                        break 'outer;
                    }
                }
            }
            if acc.len() > 5{
                acc.clear();
            }
        }
        i+=1;
    }
    'outer1:for a in word.chars().rev() {
        if a.is_digit(10) {break;}
        else {
            acc.insert_str(0,&(a.to_string()));
            if acc.len() > 3 {
                let acc1 = acc.clone();
                let nums = vec!["zero","one","two","three","four","five","six","seven","eight","nine"];
                for z in nums{
                    if acc1 !=str::replace(&acc,z,"") {
                        back = value(z).unwrap();
                        flag2=true;
                        break 'outer1;
                    }
                }
            }
            if acc.len() > 5{
                acc.clear();
            }
        }
        j-=1;
    }

    let mut ret = String::from("");
    if flag1 {ret+=&front.to_string();println!("{} is front",front);}
    else {ret.push(word.chars().nth(i).unwrap());println!("else ",word.chars().nth(i).unwrap());}
    if flag2 {ret+=&back.to_string();}
    else {ret.push(word.chars().nth(j).unwrap());}

    ret.parse::<u32>().unwrap()
    
}

fn main() {
    get_lines(|lines| {
        let mut sum = 0;
        for word in lines {
            println!("{} {}",word,getsum(word));
            sum+=getsum(word);
        }
        println!("{sum}");
    });
}
